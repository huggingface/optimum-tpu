name: Optimum TPU / Test TGI on TPU / Integration Tests

on:
  push:
  pull_request:
    branches: [ main ]
    paths:
      - "text-generation-inference/**"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  integration-tests:
    name: Run TGI Integration Tests
    runs-on:
      group: gcp-ct5lp-hightpu-8t

    container:
      image: us-central1-docker.pkg.dev/tpu-pytorch-releases/docker/xla:r2.4.0_3.10_tpuvm
      options: >-
        --shm-size "16gb"
        --ipc host
        --privileged
        ${{ vars.V5_LITEPOD_8_ENV}}
        -v /var/run/docker.sock:/var/run/docker.sock
        -v /mnt/hf_cache:/mnt/hf_cache

    env:
      PJRT_DEVICE: TPU
      HF_HUB_CACHE: /mnt/hf_cache/cache_huggingface
      HF_TOKEN: ${{ secrets.HF_TOKEN_OPTIMUM_TPU_CI }}
      DOCKER_VOLUME: /mnt/hf_cache
      PYTHONUNBUFFERED: 1
      PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION: python
      DEBIAN_FRONTEND: noninteractive

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          # Update package lists
          apt-get update
          
          # Install Docker and other dependencies with retry
          for i in {1..3}; do
            apt-get install -y \
              apt-transport-https \
              ca-certificates \
              curl \
              gnupg \
              lsb-release \
              unzip \
              wget \
              protobuf-compiler \
              docker.io && break || sleep 15
          done

      - name: Configure Docker
        run: |
          # Configure Docker daemon for host network mode
          mkdir -p /etc/docker
          echo '{
            "default-network-mode": "host",
            "registry-mirrors": ["https://mirror.gcr.io"]
          }' > /etc/docker/daemon.json
          
          # Start Docker and wait for it
          service docker start || true
          timeout 30s bash -c 'until docker info; do sleep 1; done'

      - name: Install protoc with retry
        run: |
          PROTOC_VERSION="21.12"
          PROTOC_ZIP="protoc-${PROTOC_VERSION}-linux-x86_64.zip"
          PROTOC_URL="https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOC_VERSION}/${PROTOC_ZIP}"
          
          # Function to download with retry and timeout
          download_with_retry() {
            for i in {1..5}; do
              echo "Attempt $i to download protoc..."
              if curl --connect-timeout 10 --max-time 300 -L -O "$1"; then
                return 0
              fi
              sleep 15
            done
            return 1
          }
          
          if ! download_with_retry "${PROTOC_URL}"; then
            echo "Failed to download protoc after multiple attempts"
            exit 1
          fi
          
          unzip -o "${PROTOC_ZIP}" -d /usr/local bin/protoc
          unzip -o "${PROTOC_ZIP}" -d /usr/local 'include/*'
          rm -f "${PROTOC_ZIP}"
          
          # Verify installation
          protoc --version

      - name: Install dependencies + Build TGI server
        run: |
          # Add retry mechanism for pip installations
          for i in {1..3}; do
            make tgi_docker_integration_test_installs && break || {
              echo "Attempt $i failed. Waiting before retry..."
              sleep 15
            }
          done

      - name: Run integration tests
        run: |
          DOCKER_RUN_ARGS="--network host" python -m pytest -sv text-generation-inference/integration-tests